{
	"info": {
		"_postman_id": "f1cc7b2f-748a-46a7-bf35-02ddc29392c8",
		"name": "tarea",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17357020"
	},
	"item": [
		{
			"name": "Sad Path",
			"item": [
				{
					"name": "Crear nuevo producto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponse = pm.response.json();\r",
									"pm.collectionVariables.set(\"sku_created\",jsonResponse.sku);\r",
									"var serverURL = pm.collectionVariables.get(\"server\");\r",
									"var port = pm.collectionVariables.get(\"port\");\r",
									"\r",
									"//primer mensaje\r",
									"pm.test(\"La solicitud fue completada con exito\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401]);\r",
									"});\r",
									"\r",
									"//segundo mensaje\r",
									"pm.test(\"El código de respuesta fue Creado 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"//tercer mensaje\r",
									"pm.test(\"La respuesta contiene valores validos\", function () {\r",
									"    pm.expect(jsonResponse.timestamp).to.be.a(\"string\");\r",
									"    pm.expect(jsonResponse.status).to.be.a(\"number\");\r",
									"    pm.expect(jsonResponse.error).to.a(\"string\");\r",
									"    pm.expect(jsonResponse.path).to.a(\"string\");\r",
									"});\r",
									"//cuarto mensaje\r",
									"pm.test(\"La respuesta presenta un esquema JSON valido\", () =>{\r",
									"    const validSchema = {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"timestamp\":{\"type\":\"string\"},\r",
									"            \"status\": {\"type\":\"number\"},\r",
									"            \"error\": {\"type\":\"string\"},\r",
									"             \"path\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\":[\"timestamp\",\"status\",\"error\", \"path\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(validSchema);\r",
									"});\r",
									"\r",
									"//quinto mensaje\r",
									"console.log(pm.collectionVariables.get(\"disable_request\"));\r",
									"if (pm.collectionVariables.get(\"disable_request\")== 0){\r",
									"    var getProductUrl = \"http://\"+serverURL+\":\"+port+\"/api/v1/product/\"+jsonResponse.sku;\r",
									"    pm.test(\"No se recupero el producto creado\", function () {\r",
									"        pm.sendRequest(getProductUrl, function (err, response) {\r",
									"            console.log(response.json());\r",
									"        });\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"description\":\"{{description}}\",\r\n    \"price\":{{price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}:{{port}}/api/v1/product/",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"product",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar producto existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"La solicitud no fue completada con exito\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"\r",
									"pm.test(\"El codigo de estado de la respuesta es Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Se muestra el error esperado 404\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta presenta un esquema JSON valido\", () =>{\r",
									"    const validSchema = {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"timestamp\":{\"type\":\"string\"},\r",
									"            \"status\": {\"type\":\"number\"},\r",
									"            \"error\": {\"type\":\"string\"},\r",
									"             \"path\": {\"type\":\"string\"}\r",
									"        },\r",
									"         \"required\":[\"timestamp\",\"status\",\"error\", \"path\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(validSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"El tiempo de respuesta es menor a 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"{{name}}\",\r\n    \"description\":\"{{description}}\",\r\n    \"price\":{{price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}:{{port}}/api/v1/product/{{sku_created}}/",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"product",
								"{{sku_created}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Actualizar precio de producto existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"La solicitud PATCH no fue completada con exito\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"\r",
									"pm.test(\"El codigo de estado de la respuesta es Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"Se muestra el error esperado 404\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta presenta un esquema JSON valido\", () =>{\r",
									"    const validSchema = {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"timestamp\":{\"type\":\"string\"},\r",
									"            \"status\": {\"type\":\"number\"},\r",
									"            \"error\": {\"type\":\"string\"},\r",
									"             \"path\": {\"type\":\"string\"}\r",
									"        },\r",
									"         \"required\":[\"timestamp\",\"status\",\"error\", \"path\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(validSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"El tiempo de respuesta es menor a 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\":{{price}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server}}:{{port}}/api/v1/product/{{sku_created}}/",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"product",
								"{{sku_created}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Listar todos los productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"La solicitud fue completada con exito\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([500]);\r",
									"});\r",
									"\r",
									"pm.test(\"El código de estado de la respuesta es Internal Server Error\", function () {\r",
									"    pm.response.to.have.status(\"Internal Server Error\");\r",
									"});\r",
									"\r",
									"pm.test(\"El estado de la consulta no fue exitoso\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(500);\r",
									"});\r",
									"\r",
									"//pm.test(\"Se encontró 0 producto(s)\", function () {\r",
									"    //var jsonData = pm.response.json();\r",
									"    //pm.expect(jsonData.products.length).to.greaterThan(0);\r",
									"//});\r",
									"\r",
									"pm.test(\"La respuesta presenta un esquema JSON valido\", () =>{\r",
									"    const validSchema = {\r",
									"        \"type\":\"object\",\r",
									" \"properties\":{\r",
									"            \"timestamp\":{\"type\":\"string\"},\r",
									"            \"status\": {\"type\":\"number\"},\r",
									"            \"error\": {\"type\":\"string\"},\r",
									"             \"path\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\":[\"timestamp\",\"status\",\"error\",\"path\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(validSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"El tiempo de respuesta es menor a 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}:{{port}}/api/v1/product/",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"product",
								""
							]
						}
					},
					"response": [
						{
							"name": "GET products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8081/api/v1/product/",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"api",
										"v1",
										"product",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 17 Feb 2024 08:42:21 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"products\": [\n        {\n            \"id\": 1,\n            \"name\": \"Iphone 14\",\n            \"sku\": \"4d9ad93e-b36f-4cef-93d1-8eb60c46cd76\",\n            \"description\": \"Alta Gama\",\n            \"price\": 1500\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Iphone 14\",\n            \"sku\": \"b5ec77fd-96d3-4cbc-a61c-e9cae0f3c9ab\",\n            \"description\": \"Alta Gama\",\n            \"price\": 1500\n        }\n    ],\n    \"status\": true,\n    \"message\": \"Se encontró 2 producto(s)\"\n}"
						},
						{
							"name": "GET products",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:8081/api/v1/product/",
									"host": [
										"localhost"
									],
									"port": "8081",
									"path": [
										"api",
										"v1",
										"product",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Date",
									"value": "Sat, 17 Feb 2024 17:54:39 GMT"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=60"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								}
							],
							"cookie": [],
							"body": "{\n    \"products\": [\n        {\n            \"id\": 1,\n            \"name\": \"Iphone11Update Premium\",\n            \"sku\": \"ef16ad31-51bb-48d9-b923-6a982e6fbeab\",\n            \"description\": \"description\",\n            \"price\": 1900\n        },\n        {\n            \"id\": 2,\n            \"name\": \"Iphone12Update Premium\",\n            \"sku\": \"3db663e5-edd7-4dd0-aa41-863aebf0c992\",\n            \"description\": \"description\",\n            \"price\": 1900\n        },\n        {\n            \"id\": 15,\n            \"name\": \"Iphone15\",\n            \"sku\": \"9c72f57f-939f-463d-ae8b-cc38c2f6919a\",\n            \"description\": \"fff\",\n            \"price\": 1300\n        },\n        {\n            \"id\": 18,\n            \"name\": \"Iphone 14\",\n            \"sku\": \"c131fe22-fff0-45f3-9a72-a0543373bcb2\",\n            \"description\": \"Alta Gama\",\n            \"price\": 1500\n        }\n    ],\n    \"status\": true,\n    \"message\": \"Se encontró 4 producto(s)\"\n}"
						}
					]
				},
				{
					"name": "Recuperar producto por SKU Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//pm.test(\"El producto no fue encontrado\", function () {\r",
									"    //var jsonData = pm.response.json();\r",
									"    //pm.expect(jsonData.products.length).to.greaterThan(0);\r",
									"//});\r",
									"\r",
									"pm.test(\"La respuesta presenta un esquema JSON valido\", () =>{\r",
									"    const validSchema = {\r",
									"        \"properties\":{\r",
									"            \"timestamp\":{\"type\":\"string\"},\r",
									"            \"status\": {\"type\":\"number\"},\r",
									"            \"error\": {\"type\":\"string\"},\r",
									"             \"path\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\":[\"timestamp\",\"status\",\"error\",\"path\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(validSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"El tiempo de respuesta es menor a 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server}}:{{port}}/api/v1/product/{{sku_created}}/",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"product",
								"{{sku_created}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Eliminar producto por SKU",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"La solicitud fue completada con exito\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([404]);\r",
									"});\r",
									"\r",
									"pm.test(\"El codigo de estado de la respuesta es Not Found\", function () {\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									"\r",
									"pm.test(\"El producto fue eliminado con exito\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(404);\r",
									"});\r",
									"\r",
									"pm.test(\"La respuesta presenta un esquema JSON valido\", () =>{\r",
									"    const validSchema = {\r",
									"        \"type\":\"object\",\r",
									"        \"properties\":{\r",
									"            \"timestamp\":{\"type\":\"string\"},\r",
									"            \"status\": {\"type\":\"number\"},\r",
									"            \"error\": {\"type\":\"string\"},\r",
									"             \"path\": {\"type\":\"string\"}\r",
									"        },\r",
									"        \"required\":[\"timestamp\",\"status\",\"error\",\"path\"]\r",
									"    };\r",
									"    pm.response.to.have.jsonSchema(validSchema);\r",
									"});\r",
									"\r",
									"pm.test(\"El tiempo de respuesta es menor a 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server}}:{{port}}/api/v1/product/{{sku_created}}/",
							"host": [
								"{{server}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"v1",
								"product",
								"{{sku_created}}",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "server",
			"value": "localhost",
			"type": "string"
		},
		{
			"key": "port",
			"value": "8080",
			"type": "string"
		},
		{
			"key": "sku_created",
			"value": "",
			"type": "string"
		},
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "description",
			"value": "",
			"type": "string"
		},
		{
			"key": "price",
			"value": "",
			"type": "string"
		},
		{
			"key": "disable_request",
			"value": "",
			"type": "string"
		},
		{
			"key": "content_no_updatable",
			"value": "",
			"type": "string"
		}
	]
}